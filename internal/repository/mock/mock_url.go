// Code generated by MockGen. DO NOT EDIT.
// Source: ./url.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/vfilipovsky/url-shortener/internal/entity"
)

// MockUrl is a mock of Url interface.
type MockUrl struct {
	ctrl     *gomock.Controller
	recorder *MockUrlMockRecorder
}

// MockUrlMockRecorder is the mock recorder for MockUrl.
type MockUrlMockRecorder struct {
	mock *MockUrl
}

// NewMockUrl creates a new mock instance.
func NewMockUrl(ctrl *gomock.Controller) *MockUrl {
	mock := &MockUrl{ctrl: ctrl}
	mock.recorder = &MockUrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrl) EXPECT() *MockUrlMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUrl) Create(url *entity.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUrlMockRecorder) Create(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrl)(nil).Create), url)
}

// Delete mocks base method.
func (m *MockUrl) Delete(ID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUrlMockRecorder) Delete(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUrl)(nil).Delete), ID)
}

// FindByAccessID mocks base method.
func (m *MockUrl) FindByAccessID(accessID uuid.UUID, offset, limit int) ([]*entity.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccessID", accessID, offset, limit)
	ret0, _ := ret[0].([]*entity.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccessID indicates an expected call of FindByAccessID.
func (mr *MockUrlMockRecorder) FindByAccessID(accessID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccessID", reflect.TypeOf((*MockUrl)(nil).FindByAccessID), accessID, offset, limit)
}

// FindByCode mocks base method.
func (m *MockUrl) FindByCode(code string) (*entity.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", code)
	ret0, _ := ret[0].(*entity.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockUrlMockRecorder) FindByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockUrl)(nil).FindByCode), code)
}

// RemoveOverdue mocks base method.
func (m *MockUrl) RemoveOverdue() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOverdue")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOverdue indicates an expected call of RemoveOverdue.
func (mr *MockUrlMockRecorder) RemoveOverdue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOverdue", reflect.TypeOf((*MockUrl)(nil).RemoveOverdue))
}
