// Code generated by MockGen. DO NOT EDIT.
// Source: ./get_all_urls_by_access.go

// Package mock_url is a generated GoMock package.
package mock_url

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vfilipovsky/url-shortener/internal/entity"
)

// MockGetAllByAccess is a mock of GetAllByAccess interface.
type MockGetAllByAccess struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllByAccessMockRecorder
}

// MockGetAllByAccessMockRecorder is the mock recorder for MockGetAllByAccess.
type MockGetAllByAccessMockRecorder struct {
	mock *MockGetAllByAccess
}

// NewMockGetAllByAccess creates a new mock instance.
func NewMockGetAllByAccess(ctrl *gomock.Controller) *MockGetAllByAccess {
	mock := &MockGetAllByAccess{ctrl: ctrl}
	mock.recorder = &MockGetAllByAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllByAccess) EXPECT() *MockGetAllByAccessMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockGetAllByAccess) Run(accessToken string, offset, limit int) ([]*entity.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", accessToken, offset, limit)
	ret0, _ := ret[0].([]*entity.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockGetAllByAccessMockRecorder) Run(accessToken, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockGetAllByAccess)(nil).Run), accessToken, offset, limit)
}
